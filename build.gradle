plugins {
	id 'groovy-gradle-plugin'
	id 'maven-publish'
	id 'eclipse'
}

repositories {
	mavenLocal()
	maven { url 'http://mvn.revoltsoft.ru/' }
}

ext.z8Version = '1.3.0'

dependencies {
	compile "org.zenframework.z8:org.zenframework.z8.compiler:${z8Version}"
}

gradlePlugin {
	plugins {
		z8BasePlugin {
			id = 'z8-base'
			implementationClass = 'org.zenframework.z8.gradle.Z8BasePlugin'
		}
		z8JavaPlugin {
			id = 'z8-java'
			implementationClass = 'org.zenframework.z8.gradle.Z8JavaPlugin'
		}
		z8BlPlugin {
			id = 'z8-bl'
			implementationClass = 'org.zenframework.z8.gradle.Z8BlPlugin'
		}
		z8JsPlugin {
			id = 'z8-js'
			implementationClass = 'org.zenframework.z8.gradle.Z8JsPlugin'
		}
		z8AppPlugin {
			id = 'z8-app'
			implementationClass = 'org.zenframework.z8.gradle.Z8AppPlugin'
		}
	}
}

group = 'org.zenframework.z8'
version = '1.1.12'

sourceCompatibility = 1.8
targetCompatibility = 1.8

buildDir = './target'

sourceSets.main.java.outputDir = file("${buildDir}/classes/main")
sourceSets.main.output.resourcesDir = file("${buildDir}/classes/main")

eclipse {
	// Eclipse: default java output -> $buildDir/classes/default
	classpath.defaultOutputDir = new File(buildDir, 'classes/main')
	// Eclipse: java source folders output -> ${buildDir}/classes/...
	classpath.file.whenMerged {
		entries.findAll { entry ->
			entry instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder
		}.each { entry ->
			entry.output = entry.output.replace('bin/', relativePath("${buildDir}/classes/"))
		}
	}
}

publishing {
	repositories {
		mavenLocal()
		if (project.hasProperty('mavenPublishRemote') && mavenPublishRemote) {
			maven {
				url = "sftp://revoltsoft.ru:22/opt/mvn"
				credentials {
					username revoltUser
					password revoltPassword
				}
			}
		}
	}
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}
}
